#!/usr/bin/env python
import argparse
import os
import os.path as path

CONFIRM_MSG = ('The file ".%s" allready exists. [S]kip all, [s]kip, [O]verride '
                'all, [o]verride, [B]ackup all, [b]ackup?: ')
def install(args):
    home = os.environ['HOME']
    dotbase = os.getcwd()

    default_action='ask'
    for topic in os.listdir(dotbase):
        topdir = path.join(dotbase, topic)

        # Ignore the file if it's not a folder, or if it's hidden
        if not path.isdir(topdir) or topic[0] == '.':
            continue

        for dotfile in os.listdir(topdir):
            dotpath = path.join(topdir, dotfile)
            target = path.join(home, '.' + dotfile)

            if path.exists(target):
                # Remove existing symlinks
                action = 'override' if path.islink(target) else default_action

                if action == 'ask':
                    choice = raw_input(CONFIRM_MSG % (dotfile))[0]

                    actmap = {'s': 'skip', 'o': 'override', 'b': 'backup'}
                    # Backup by default
                    action = actmap[choice] if choice in actmap else 'backup'

                    if choice.isupper():
                        default_action = action

                if action == 'override':
                    os.remove(target)
                elif action == 'backup':
                    bkpdir = path.join(home, '.dotbkp')

                    if not path.exists(bkpdir):
                        os.mkdir(bkpdir)

                    os.rename(target, path.join(bkpdir, dotfile))
                elif action == 'skip':
                    continue

            os.symlink(dotpath, target)

def uninstall(args):
    home = os.environ['HOME']
    dotbase = os.getcwd()

    # Get available backups
    bkpdir = path.join(home, '.dotbkp')
    backups = os.listdir(bkpdir) if path.exists(bkpdir) else []

    for file in os.listdir(home):
        # Skip if not a symlink
        fpath = path.join(home, file)
        if not path.islink(fpath):
            continue

        # Skip if symlink doesn't point to dotfile repo
        source = path.realpath(fpath)
        if not source.startswith(dotbase):
            continue

        os.remove(fpath)

        # Restore the file from the backups
        dotfile = file[1:]
        if dotfile in backups:
            os.rename(path.join(bkpdir, dotfile), fpath)

    # Remove the backup dir, if empty
    if len(os.listdir(bkpdir)) == 0:
        os.rmdir(bkpdir)

DOT_DESCRIPTION = ('This script is used to TAKE OVER THE WORLD.. err.. '
                    'manage dotfiles')
INSTALL_DESCRIPTION = 'Install the dotfiles in yo home directory brah'
UNINSTALL_DESCRIPTION = 'Get rid of the dot files that symlink here'

def main():
    # Parse arguments
    parser = argparse.ArgumentParser(description=DOT_DESCRIPTION)
    commands = parser.add_subparsers(metavar='command',
                                    help='Available commands are: %(choices)s')

    ## Install subparser
    install_parser = commands.add_parser('install',
                                        description=INSTALL_DESCRIPTION)
    install_parser.set_defaults(func=install)

    # Uninstall subparser
    uninstall_parser = commands.add_parser('uninstall',
                                          description=UNINSTALL_DESCRIPTION)
    uninstall_parser.set_defaults(func=uninstall)

    args = parser.parse_args()
    args.func(args)

if __name__ == '__main__':
    main()
