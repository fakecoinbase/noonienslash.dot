#!/usr/bin/env nix-shell
#!nix-shell -i bash -p bash

usage() {
	echo "Usage: $0 {{-p package}} [command..]"
	exit 2
}

check_pkg_exists() {
	expr='{ package }: import <nixpkgs> {} ? ${package}'
	exists=$(nix-instantiate --no-gc-warning --eval -E "$expr" --argstr package "$1")
	if [ "$exists" != "true" ]; then
		echo "package $1 does not exist"
		exit 2
	fi
}

PACKAGES=""
while getopts 'p:' c; do
	case $c in
		p) check_pkg_exists "$OPTARG"; PACKAGES="$PACKAGES -p $OPTARG" ;;
		h|?) usage ;;
	esac
done

shift $((OPTIND-1))

cmd=
for arg in "$@"; do
	cmd="$cmd ${arg@Q}"
done

# no command specified, execute first binary in first package
if [ "x$cmd" == "x" ]; then
	if [ "x$PACKAGES" == "x" ]; then
		usage
	fi

	pkg=$(echo "$PACKAGES" | cut -d\  -f3)
	expr="with import <nixpkgs> {}; let x = $pkg; in x"
	path=$(nix-instantiate --no-gc-warning -E "$expr")
	out=$(nix-store --no-gc-warning -r $path)

	if [ -f "$out/bin/$pkg" ]; then
		exec nix-shell $PACKAGES --command "$out/bin/$pkg"

	elif [ -d "$out/bin" ]; then
		for f in $out/bin/*; do
			exec nix-shell $PACKAGES --command "$f"
		done
	fi

	# TODO: find a way to execute .desktop files

	echo "can't find anything to run in package $pkg"
	exit 2
fi


# no packages were provided
if [ "x$PACKAGES" == "x" ]; then
	cmd_pkg=$1
	if (check_pkg_exists $cmd_pkg &>/dev/null); then
		# check if package with the name of command exists, use it
		PACKAGES="-p $cmd_pkg"
	else
		# if not, search for a package that provides it
		matches=$(command-not-found $cmd_pkg 2>&1 | tail +3 | cut -d. -f2-)
		count=$(echo -n "$matches" | grep -c '^')

		# couldn't find any
		if [ $count -eq 0 ]; then
			echo "no packages found that provide command $cmd_pkg"
			exit 2
		fi

		# found more than one package, user has to specify which one to use
		if [ $count -gt 1 ]; then
			echo "more than one package provides command $cmd_pkg, please choose one:"
			echo "$matches" | while read opt; do
				echo -e "\t$opt"
			done
			exit 2
		fi

		PACKAGES="-p $matches"
	fi
fi

exec nix-shell $PACKAGES --command "$cmd"
