" =============================================================================
" noonien's awesome .vimrc
" This file is part of my dotfiles, which can be found at:
"    https://github.com/noonien/.dot
" =============================================================================

" =============================================================================
" Initialization {{{1
" =============================================================================
    " Use Vim settings, rather than Vi settings.
    set nocompatible

    " Clear Autocommands
    autocmd!

    " Look for Vim settings in files
    set modeline
    set modelines=5

    " Pathogen Initialization
    " This loads all the plugins in ~/.vim/bundle
    runtime pathogen/autoload/pathogen.vim
    call pathogen#infect()
    call pathogen#helptags()

    " Load plugin and indent files for specific file types
    filetype plugin on
    filetype indent on

    " Wildmode options {{{2
    " ----------------
        set wildmenu
        set wildmode=longest:full,full
        set wildignore+=*.o,*.out,*.obj,.git,*.pyc
        set wildignore+=*.png,*.jpg,*.gif
    " }}}

" ========================================================================= }}}
" Look and Feel {{{1
" =============================================================================
    " Basics / Misc {{{2
    " -------------
        " Let netrw show things in a tree structure instead of a flat list
        let g:netrw_liststyle=3

        " Used for saving git commits
        filetype on
        filetype off

        " Allow backspace in insert mode
        set backspace=indent,eol,start

        " Disable mouse
        set mouse=

        " Store lots of cmdline history
        set history=1000

        " Enable relative line numbering
        set number
        set relativenumber

        " Start scrolling when we're 4 lines away from margins
        set scrolloff=4
        set sidescroll=1
        set sidescrolloff=4

        " Use UTF-8 encoding
        set encoding=utf-8 nobomb

        " Hide buffers after they are abandoned
        set hidden

        " Disable swap and backup files
        set noswapfile
        set nobackup
        set nowritebackup

        " Auto commplete menu
        set completeopt=longest,menu

        " In visual block mode, allow going beyond EOL
        set virtualedit=block

        " Save up to 100 marks, enable capital marks
        set viminfo='100,f1

    " }}}
    " Tabbing and spaces {{{2
    " ------------------
        " Use 4 spaces instead of tabs
        set ts=4
        set shiftwidth=4
        set softtabstop=4
        set expandtab

        " Auto indent
        set autoindent


        " Display tabs and trailing spaces visually
        set list
        set listchars=tab:»»,trail:✖,nbsp:~
    " }}}
    " Search Settings {{{2
    " ---------------
    "
        " Find the next match as we type the search
        set incsearch

        " Ignore case when searching
        set ignorecase

        " Figure out search case automatically
        set smartcase

        " Set magic on for regular expressions
        set magic

        " Enable the g flag by default when substituting
        set gdefault
    " }}}
    " Colors Settings {{{2
    " ---------------
        " Enable highlight search and highlight when searching
        set hlsearch

        " Show matching brackets when caret is over one
        set showmatch

        " Turn on syntax highlighting
        syntax on

        " Highlight the 80th
        set colorcolumn=80

        " Highlight trailing whitespace
        highlight ExtraWhitespace ctermbg=darkred guibg=darkblue
        match ExtraWhitespace /\s\+$/
    " }}}
    " Persistent Undo {{{2
    " ---------------
        " Make sure a tmp folder exists
        silent !mkdir ~/.vim/tmp > /dev/null 2>&1

        " Enable persistent undo
        set undofile
        set undodir=~/.vim/tmp
        set undolevels=1000
    " }}}
    " Spelling / Typos {{{2
    " ----------------
        :command! WQ wq
        :command! Wq wq
        :command! W w
        :command! Q q
    " }}}

" ========================================================================= }}}
" Plugin Settings {{{1
" =============================================================================
    " Python Settings {{{2
    " ---------------
        " Auto run flake8 after writing the file to disk
        autocmd BufWritePost *.py call Flake8()
    " }}}
    " JavaScript settings {{{2
    " -------------------
        " Auto run jshint after writing a js file to disk
        let jshint2_save = 1
    " }}}

" ========================================================================= }}}
" Mappings {{{1
" =============================================================================
    " Leader {{{2
    " ------
        let mapleader = ","
    " }}}
    " Disable Q (Command Shell Mode) {{{2
    " ------------------------------
        nnoremap Q <nop>
    " }}}
    " * No longer moves the cursor when hitting it the first time {{{2
    " -----------------------------------------------------------
        nmap * *Nzz
        nmap # #Nzz
    " }}}
    " Disable Arrow Keys {{{2
    " ------------------
        " Unbind the cursor keys in insert, normal and visual modes.
        for prefix in ['i', 'n', 'v']
          for key in ['<Up>', '<Down>', '<Left>', '<Right>']
            exe prefix . "noremap " . key . " <Nop>"
          endfor
        endfor
    " }}}
    " Space folds and unfolds {{{2
    " -----------------------
        nmap <Space> za
    " }}}
    " Go Mappings {{{2
    " -----------
        " Show type info for the word under your cursor with <leader>i
        au FileType go nmap <Leader>i <Plug>(go-info)

        " Open the relevant Godoc for the word under the cursor with
        " <leader>gd or vertically with <leader>gv
        au FileType go nmap <Leader>gd <Plug>(go-doc)
        au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)

        " Run commands, such as go run with <leader>r for the current file or
        " go build and go test for the current package with <leader>b and
        " <leader>t.
        au FileType go nmap <leader>r <Plug>(go-run)
        au FileType go nmap <leader>b <Plug>(go-build)
        au FileType go nmap <leader>t <Plug>(go-test)

        " Replace gd (Goto Declaration) for the word under your cursor
        " (replaces current buffer):
        au FileType go nmap gd <Plug>(go-def)

        " Or open the defitinion/declaration in a new vertical, horizontal or
        " tab for the word under your cursor:
        au FileType go nmap <Leader>ds <Plug>(go-def-split)
        au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
        au FileType go nmap <Leader>dt <Plug>(go-def-tab)
    " }}}

" ========================================================================= }}}
" Performance optimizations {{{1
" =============================================================================
    " Fast terminal connections
    set ttyfast

    " Don't redraw when running macros
    set lazyredraw

    " Set timeout on keycodes but not mappings
    "set timeout ttimeout    " Enable timeouts for mappings and key codes
    "set timeoutlen=100      " Mapping timeout
    "set ttimeoutlen=100     " Key code timeout

    " Syntax optimazations
    syntax sync minlines=256
    " set syntaxcol=256
" }}}
" =============================================================================
" vim: foldmethod=marker foldmarker={{{,}}} ts=4 sts=4 sw=4 expandtab:
